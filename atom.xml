<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fejich.github.io</id>
    <title>瞎折腾分享</title>
    <updated>2021-09-10T11:55:11.537Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fejich.github.io"/>
    <link rel="self" href="https://fejich.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fejich.github.io/images/avatar.png</logo>
    <icon>https://fejich.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 瞎折腾分享</rights>
    <entry>
        <title type="html"><![CDATA[Docker Compose 简单使用手册]]></title>
        <id>https://fejich.github.io/post/docker-compose-jian-dan-shi-yong-shou-ce/</id>
        <link href="https://fejich.github.io/post/docker-compose-jian-dan-shi-yong-shou-ce/">
        </link>
        <updated>2021-09-10T11:25:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="介绍">📖介绍</h2>
<p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。<br>
它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>
<p><strong>优点非常明显，通过易读的 YAML 格式文件。实现复杂容器部署，快速修改配置</strong></p>
<h2 id="安装">🔩安装</h2>
<p>群晖NAS系统内置就有 docker-compose ，为其工程师点赞</p>
<h3 id="二进制包方式">二进制包方式</h3>
<pre><code>sudo curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose

# 国内用户可以使用以下方式加快下载
sudo curl -L https://download.fastgit.org/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose
</code></pre>
<h3 id="docker-run-方式">Docker run 方式</h3>
<p>适合 <code>unRAID</code> 这类精简 Linux 系统，使用 alias 命令别名方式实现免安装使用</p>
<pre><code>echo alias docker-compose=&quot;'&quot;'docker run --rm --name docker-compose \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v &quot;$PWD:$PWD&quot; \
    -w=&quot;$PWD&quot; \
    docker/compose'&quot;'&quot; &gt;&gt;  ~/.bashrc

source ~/.bashrc
</code></pre>
<p>推荐一同部署 ctop 这个可视化的容器管理程序</p>
<pre><code>echo alias ctop=&quot;'&quot;'docker run --rm --name ctop -ti \
    -v /var/run/docker.sock:/var/run/docker.sock \
    quay.io/vektorlab/ctop'&quot;'&quot; &gt;&gt;  ~/.bashrc
</code></pre>
<h2 id="compose-模板文件">📝Compose 模板文件</h2>
<p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<pre><code>---
version: &quot;2.1&quot;
services:
  xxx:
    image: uuuu/xxx
    container_name: xxx
    environment:
#      - ALL_PROXY=socks5://192.168.168.4:7890
      - PUID=1000
      - PGID=100
      - TZ=Asia/Shanghai
#    tty: true
#    privileged: true
    volumes:
      - ./config:/config
    network_mode: bridge #host
#    dns:
#      - 8.8.8.8
#    ports:
#      - 8096:8096
#    devices:
#      - /dev/dri:/dev/dri #分配显卡给容器
#    tmpfs:
#      - /tmp #共享/tmp目录
#    command: sh -c &quot;cd /config &amp;&amp; chmod a+x npc &amp;&amp; ./npc&quot;
  mem_limit: 512m #限制容器可用内存
  cpus: 0.5 #限制容器可用 CPU占比
  restart: unless-stopped
</code></pre>
<h2 id="常用命令">📌常用命令</h2>
<p>yaml 文件同目录内输入命令</p>
<ul>
<li>启动容器：<code>docker-compose up -d</code></li>
<li>停止容器：<code>docker-compose down</code></li>
<li>查看进程：<code>docker-compose top</code></li>
<li>重启容器：<code>docker-compose restart</code></li>
<li>查看日志：<code>docker-compose logs</code></li>
<li>查看端口：<code>docker-compose port</code></li>
<li>拉取镜像：<code>docker-compose pull</code></li>
<li>进入容器内的终端：<code>docker-compose exec {container-name} sh</code></li>
</ul>
<hr>
<h2 id="参考">📍参考</h2>
<ul>
<li><a href="https://www.jianshu.com/p/2217cfed29d7">Docker Compose 配置文件详解</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/compose/introduction">Docker —— 从入门到实践</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Youtube-DLP 使用记录，配合 emby]]></title>
        <id>https://fejich.github.io/post/youtube-dlp-shi-yong-ji-lu-pei-he-emby-shi-yong/</id>
        <link href="https://fejich.github.io/post/youtube-dlp-shi-yong-ji-lu-pei-he-emby-shi-yong/">
        </link>
        <updated>2021-09-10T07:38:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">📖简介</h2>
<p><strong>yt-dlp</strong> 是 Youtube-DL 的增强版，更新维护很积极。相比起原版更为稳定，功能更完善。</p>
<ul>
<li>主页：https://github.com/yt-dlp/yt-dlp</li>
</ul>
<blockquote>
<p>Win 系统直接下载 exe 即可运行，其他系统下还需要系统安装有 Python3.6+ 环境。<br>
Linux, macOS, BSD 系统均为同一个提供可执行文件</p>
</blockquote>
<h2 id="高级功能需要调用-ffmpeg">🤺高级功能需要调用 ffmpeg</h2>
<p>没有 ffmpeg 情况下，能下载的文件格式有限封面图转换之类的功能也不能工作</p>
<blockquote>
<p>还有一些平常用不到的功能需要依赖另外的软件，具体看项目主页</p>
</blockquote>
<h2 id="️配置文件">⚙️配置文件</h2>
<p>于主程序目录或者用户HOME目录下建立 <code>yt-dlp.conf</code> 文件，即会调用。<br>
用来设置输出文件名，下载代理服务器，下载封面，下载视频简介等非常方便</p>
<blockquote>
<p>注意配置文件内不能有中文字符，否则会报错</p>
</blockquote>
<pre><code>#filename
-o '%(title)s[%(resolution)s][%(upload_date)s].%(ext)s'

# best HDR or best SDR
#-f 'bestvideo[vcodec=vp9.2]+bestaudio/bestvideo[vcodec=vp9]+bestaudio'

#only m4a
#-f 'ba[ext=m4a]'
#-f wa

#thumbnail to jpg
--write-thumbnail
--convert-thumbnails jpg
#--embed-thumbnail

#proxy
--proxy 127.0.0.1:7890

#other
--write-description
--write-subs
--compat-options no-live-chat
--remux-video mkv

#playlist
#--playlist-items 1-2,11-20

#--skip-download

--exec 'sh /Users/fejich/Movies/Youtube/nfo.sh'
</code></pre>
<h2 id="视频简介转换为-emby-能识别的-nfo-文件">📝视频简介转换为 emby 能识别的 nfo 文件</h2>
<p>用于把视频简介（description文件）转换成 emby 能识别的格式，<br>
可保存为 sh 脚本使用 <code>--exec</code>  参数调用。</p>
<blockquote>
<p>适用于 Linux 与 Mac 系统</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://fejich.github.io/post-images/1631260550740.png" alt="" loading="lazy"></figure>
<pre><code class="language-sh">#!/bin/bash

# 生成临时文件
tee nfo1.temp &lt;&lt;-'EOF'
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;movie&gt;
  &lt;plot&gt;&lt;![CDATA[
EOF

tee nfo2.temp &lt;&lt;-'EOF'

]]&gt;&lt;/plot&gt;
&lt;/movie&gt;
EOF

# 生成 emby 可识别的 nfo 文件并添加换行符号
file=$1
filename=${file%.*}
nfo=${filename}.nfo
description=${filename}.description

touch &quot;${nfo}&quot;;
cat nfo1.temp &gt; &quot;${nfo}&quot;;
sed 's#$#&amp;&lt;br/&gt;#g' &quot;${description}&quot; &gt;&gt; &quot;${nfo}&quot;;
cat nfo2.temp &gt;&gt; &quot;${nfo}&quot;;

# 删除临时文件
rm nfo1.temp nfo2.temp
</code></pre>
<h2 id="win-系统下简单可交互-bat-脚本">🖥Win 系统下简单可交互 bat 脚本</h2>
<p>保存为 bat 脚本，与主程序放同一个目录即可</p>
<pre><code>@ECHO OFF&amp;PUSHD %~DP0 &amp;TITLE Youtube-DLP 下载脚本
@ echo.
@ echo.
@ echo.
@ echo.
set /p ID= 输入 视频/播放列表网址 按回车：
@ echo.
@ echo.
@ echo.
@ echo.
ECHO 分析下载地址......
yt-dlp %ID%
@ echo.
@ echo.
@ echo.
@ echo.
ECHO 下载完成，任意键退出......
pause&gt;NUL
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过网络唤醒(WOL)叫醒睡眠状态中的Mac]]></title>
        <id>https://fejich.github.io/post/tong-guo-wang-luo-huan-xing-woljiao-xing-shui-mian-zhuang-tai-zhong-de-mac/</id>
        <link href="https://fejich.github.io/post/tong-guo-wang-luo-huan-xing-woljiao-xing-shui-mian-zhuang-tai-zhong-de-mac/">
        </link>
        <updated>2021-09-10T01:31:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="wol-是什么">❔WOL 是什么</h2>
<p>Wake-on-LAN简称WOL或WoL，中文多译为“网络唤醒”、“远程唤醒”技术。WOL是一种技术，同时也是该技术的规范标准，它的功效在于让休眠状态或关机状态的电脑，透过局域网的另一台电脑对其发令，使其唤醒、恢复成运作状态，或从关机状态转成引导状态。</p>
<p>有关WOL技术，最初是在1997年4月由IBM公司的先进管理联盟（Advanced Manageability Alliance）所提出，然而当时仅约略透露，之后其他业者及产业也逐渐推行。</p>
<blockquote>
<p>引用自：<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%96%9A%E9%86%92">网络唤醒 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
</blockquote>
<h2 id="mac-电脑的-wol-支持情况">💻 Mac 电脑的 WOL 支持情况</h2>
<p>WOL 基本上是个 PC电脑 都支持，然而苹果嘛~~不跟 PC 厂们玩这一套。</p>
<p>Mac 并没有完整支持 WOL ，<strong>关机状态</strong>是无法使用 WOL 唤醒的（黑苹果倒是支持关机唤醒）</p>
<p>但是会在<strong>睡眠状态</strong>下对会对 WOL 的<strong>魔法数据包</strong>（Magic Packet）有所反应，进入一个类似Android手机<strong>超级省电模式</strong>的状态。</p>
<ul>
<li>屏幕保持着关闭</li>
<li>各种 App 也并没有运行</li>
<li>机器会对 ping 的请求有所回应</li>
<li>部分网络服务像是 文件共享 和 SSH远程登陆 能工作（前提是你在<strong>系统偏好设置</strong>打开了该功能）</li>
</ul>
<p>这时候唯有通过按下键盘鼠标的按键才能真正唤醒 Mac</p>
<h2 id="通过-wol-唤醒-mac-的方法">💡通过 WOL 唤醒 Mac 的方法</h2>
<p>由于睡眠状态下 Mac 会对 WOL 有所反应，而且可以进行 SSH远程登陆。</p>
<p>所以可以通过其他电脑 SSH 访问 Mac 执行 <code>caffeinate</code> 命令模拟鼠标键盘按键，实现曲线救国！</p>
<h3 id="1mac-上的设置">1）Mac 上的设置</h3>
<p><img src="https://fejich.github.io/post-images/1631237578173.png" alt="" loading="lazy"><br>
<img src="https://fejich.github.io/post-images/1631237581532.png" alt="" loading="lazy"></p>
<p>开启服务后，在 系统偏好设置 <code>→</code> 网络 找到 IP 与 MAC地址 记下来后续操作要用到</p>
<p>让机器进入睡眠状态</p>
<h3 id="2其他电脑执行命令唤醒-mac">2）其他电脑执行命令唤醒 Mac</h3>
<p>于另一台电脑上，执行以下命令即可唤醒 Mac ！</p>
<pre><code class="language-shell">etherwake {Mac_MAC_ADDRESS}
ssh {MacUserName}@{MacIP} 'caffeinate -u -t 1'
</code></pre>
<h3 id="可选配置-ssh-免密码登陆-mac">[可选]配置 ssh 免密码登陆 Mac</h3>
<pre><code class="language-shell">ssh-keygen -t rsa
</code></pre>
<blockquote>
<p>连续三次回车,即在本地主机上生成了公钥和私钥,不设置密码</p>
</blockquote>
<pre><code class="language-shell">cat ~/.ssh/id_rsa.pub | ssh {MacUserName}@{MacIP} 'mkdir .ssh ;cat &gt;&gt; .ssh/authorized_keys'
</code></pre>
<blockquote>
<p>将本地密钥写入到 Mac 主机信任列表内</p>
</blockquote>
<hr>
<p>参考：<a href="https://www.tweaking4all.com/forum/macos-x-software/waking-up-a-mac-with-wake-on-lan/">Waking up a Mac with Wake On LAN – MacOS X Software – Forum</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[迎广MS04机箱更换记录]]></title>
        <id>https://fejich.github.io/post/ying-guang-ms04-ji-xiang-geng-huan-ji-lu/</id>
        <link href="https://fejich.github.io/post/ying-guang-ms04-ji-xiang-geng-huan-ji-lu/">
        </link>
        <updated>2021-09-09T09:08:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="起因">🚀起因</h2>
<p>更换机箱没有什么特别理由，仅仅是因为用得久了颜值下降还有厚厚的积灰难以清理.....</p>
<p>干脆就物色一只新的箱子，提升使用体验增加生活幸福感。</p>
<blockquote>
<p>原本计划是双11再剁手的，不过好基友 shenhaiyu 得知后送了套 8Gx2 的内存助我升级硬件。我也就毫不犹豫的提前下单了😄</p>
</blockquote>
<h2 id="挑选">🎯挑选</h2>
<p>NAS 机箱相对小众，颜值高做工好还要设计合理的NAS机箱市面上能选的没几台。</p>
<ul>
<li>蜗牛星际那种垃圾佬专用矿箱直接略过</li>
<li>万由出的两款没有明显缺陷，我原本就在用所以略过</li>
<li>拓普龙这类工控机箱倒是便宜皮实，但是颜值有点不在线</li>
<li>小作坊DIY做的机箱交货期久，做工没保证出问题翻车几率高</li>
<li>“大厂银欣”出的几款都是塑料硬盘托架，做工设计方面网上评价褒贬不一</li>
<li>乔思伯N1直立式5盘位机箱有点长草，然而得抽出整个外壳才能换硬盘实在是个容易出状况的设计</li>
<li>mineNAS迈K1介绍说是超微设计国内代工生产，但是看淘宝买家发的评论图与超微官网有好些出入</li>
</ul>
<p>挑来选去最终是买了 <strong>IN WIN 迎广MS04 NAS机箱</strong>。选这款最大的原因是其可拉出的主板托盘设计，这个为安装调试与日后维护提供了便利。</p>
<p>整体做工与颜值也符合我的要求，详细优点开箱网上已经有很多这里就不再重复了。</p>
<figure data-type="image" tabindex="1"><img src="https://fejich.github.io/post-images/1631239922166.png" alt="" loading="lazy"></figure>
<h2 id="️装机">⚙️装机</h2>
<p>淘宝选一家销量最高的授权代理商下单，全新机箱+原装电源 顺丰包邮 <strong>总价：869</strong></p>
<p>2天时间顺丰小哥横跨大半个中国把机箱送到我手上，拿到后第一时间开箱检查却是发现翻了车 😂</p>
<p>说好的全新机箱倒是不假，但是里边的电源却是<strong>生了锈</strong>的。。。条码也被划花，明显就是使用过的</p>
<figure data-type="image" tabindex="2"><img src="https://fejich.github.io/post-images/1631239929847.jpg" alt="" loading="lazy"></figure>
<p>然后前置面板 USB 也是有状况，两个 USB 口都没对齐外壳，其中一只更是完全无法插进去。</p>
<figure data-type="image" tabindex="3"><img src="https://fejich.github.io/post-images/1631239935249.jpg" alt="" loading="lazy"></figure>
<p>万幸的是联系客服后，店铺处理很迅速承认过失并安排了替换。</p>
<p>我最后是决定把问题电源做退货处理，机箱留着。USB 口的问题客服承诺补偿50块红包，等有时间我再自行拆机看看能不能拨正位置。</p>
<p>其他方面倒是没遇到问题，使用旧机电源顺利完成装机。</p>
<blockquote>
<p>实际使用一天后发现，机箱硬盘托板不能实时显示每只硬盘的读写状态。通电后只长亮蓝灯，读写时候没有其他提示实在是可惜。</p>
</blockquote>
<h2 id="️最后记念">♥️最后记念</h2>
<p>相册里边翻出 2015.05.13 号拍的万由4盘位NAS整机开箱，即使从今天来看这个做工跟设计都是很给力的。希望万由日后能设计出更出色的NAS机箱，让消费者可以有更多靠谱的NAS机箱选择。</p>
<figure data-type="image" tabindex="4"><img src="https://fejich.github.io/post-images/1631239945588.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群辉反代虚拟机套件noVNC窗口提示“无法连线到伺服器”的解决方法]]></title>
        <id>https://fejich.github.io/post/Synology-reverse-proxy/</id>
        <link href="https://fejich.github.io/post/Synology-reverse-proxy/">
        </link>
        <updated>2021-09-08T05:53:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题情况">🚧问题情况</h2>
<p>群晖 <code>DSM 6.2.1</code>以上版本，在使用   反向代理用域名访问<code>虚拟机（Virtual Machine）</code>时标题为 noVNC 的网页 提示<code>“无法连线到伺服器”（Failed to connect to server）</code>。</p>
<p>看过之前大神的帖子让改 Portal.mustache 文件，但是在 DSM 6.2.1 及以上版本中这种改法不但不起作用，还会让 DSM 无法启动，请大家一定要注意。</p>
<h2 id="解决办法">💡解决办法</h2>
<p>在 控制面板-应用程序门户-反向代理服务器 中选中要访问虚拟机的那条反向代理， 编辑-“自定义标题”选项卡-“新增”的下拉箭头-WebSocket，然后随便点一下新添加的 “Upgrade”或者“Connection”标签名称，确定保存即可。每个需要访问虚拟机的反代域名都要设置一遍才行。<br>
<img src="https://fejich.github.io/post-images/1631239017002.png" alt="" loading="lazy"></p>
<h2 id="转载整理自">🎈转载整理自</h2>
<p><a href="http://www.nasyun.com/thread-70881-1-1.html">解决使用反向代理域名访问群晖虚拟机时提示noVNC“无法连线到伺服器”的问题</a></p>
<ul>
<li>作者：<code>shenhaiyu</code> 于 2020-5-17 20:15 编辑</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unRAID 系统下定时运行脚本获取 bing每日壁纸]]></title>
        <id>https://fejich.github.io/post/unraid-xi-tong-xia-ding-shi-yun-xing-jiao-ben-huo-qu-bing-mei-ri-bi-zhi/</id>
        <link href="https://fejich.github.io/post/unraid-xi-tong-xia-ding-shi-yun-xing-jiao-ben-huo-qu-bing-mei-ri-bi-zhi/">
        </link>
        <updated>2021-09-08T03:14:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">📖前言</h2>
<p>最近 Fork 了一个使用  GitHub Action 自动抓取bing壁纸的项目</p>
<p>https://github.com/yfun-lab/bing-wallpaper</p>
<p>感觉项目的Python脚本写得十分优雅，按个人的习惯简单修改了脚本部署到自己的 GitHub 上。<br>
同时顺手在本地 NAS 上也跑一个，供日常观赏。</p>
<h2 id="操作步骤">🔨操作步骤</h2>
<h3 id="1安装所需的运行环境">1）安装所需的运行环境</h3>
<p>首先于 unRAID  <code>Community Applications</code> 安装 <strong>Nerd Tools</strong> 和 <strong>User Scripts</strong> 两个插件</p>
<figure data-type="image" tabindex="1"><img src="https://fejich.github.io/post-images/1631240567548.png" alt="" loading="lazy"></figure>
<p>然后打开 <strong>Nerd Tools</strong> 安装 <code>Python3</code></p>
<figure data-type="image" tabindex="2"><img src="https://fejich.github.io/post-images/1631240579291.png" alt="" loading="lazy"></figure>
<p>至此所需的运行环境就部署完成了</p>
<h3 id="2运行脚本">2）运行脚本</h3>
<p>保存为 <code>main.py</code> ，同时于同目录建一个 <code>Wallpaper</code> 文件夹用于存放下载来的文件</p>
<p>在终端使用 <code>python3 main.py</code> 测试脚本是否正常运作</p>
<pre><code class="language-python">import urllib.request as req
import json
import re


url = 'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;nc=1614319565639&amp;pid=hp&amp;FORM=BEHPTB&amp;uhd=1&amp;uhdwidth=3840&amp;uhdheight=2160'

# try:
res = req.urlopen(url)
res = res.read().decode('utf-8')

api = json.loads(res)

api = api['images']
downloadURL = &quot;https://bing.com&quot; + api[0]['url']
dateTime = api[0]['enddate']
copyright = api[0]['copyright'] # 获取版权信息
rstr = r'[\/\\\:\*\?\&quot;\&lt;\&gt;\|]'  # '/ \ : * ? &quot; &lt; &gt; |'
new_copyright = re.sub(rstr, '_', copyright)  # 替换为下划线

req.urlretrieve(downloadURL, &quot;./Wallpaper/{0}{1}{2}.jpg&quot;.format(dateTime, '@', new_copyright))
req.urlretrieve(url, &quot;./Wallpaper/{}.json&quot;.format(dateTime))

# except:
#     print(&quot;Error.&quot;)
</code></pre>
<blockquote>
<p>于原项目基础上修改了图片保存的目录与文件名（按 日期@版权信息 命名）<br>
增加保存当日完整的 json 信息到本地，以供日后可能有用得上的时候</p>
</blockquote>
<h3 id="3配置定时执行">3）配置定时执行</h3>
<figure data-type="image" tabindex="3"><img src="https://fejich.github.io/post-images/1631240598782.png" alt="" loading="lazy"></figure>
<p>到 <strong>User Scripts</strong> 插件内添加一个新脚本，内容按实际情况编辑</p>
<pre><code class="language-bash">#!/bin/bash
cd /mnt/disk1/appdata/bing/ &amp;&amp; python3 main.py
</code></pre>
<p>最后设置 <a href="https://corntab.com/">Cron</a> 计划任务定时运行</p>
<p><code>2 0 * * *</code></p>
<blockquote>
<p>每日凌晨零点02分</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[导出视频内嵌字幕文件的两个方法]]></title>
        <id>https://fejich.github.io/post/dao-chu-shi-pin-nei-qian-zi-mu-wen-jian-de-liang-ge-fang-fa/</id>
        <link href="https://fejich.github.io/post/dao-chu-shi-pin-nei-qian-zi-mu-wen-jian-de-liang-ge-fang-fa/">
        </link>
        <updated>2021-09-08T01:42:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">📖前言</h2>
<p>一切起因是发现了 emby 这个媒体中心软件有个 “bug”</p>
<p>内嵌了 .ass字幕 的视频如果是 directplay 方式（直接播放）字幕能正确显示，</p>
<p>但是一旦触发了转码，字幕就得隔一分钟左右才能显示出来。</p>
<p>而造成这么慢的原因，是因为实时导出字幕这个操作比较耗时（目前我尝试过好几个软件都得实现不了秒出）</p>
<p>直接外挂的字幕就没这种烦恼，所以有了这个文章。</p>
<h2 id="方法1-使用-mkvtoolnix-工具包">💡方法1 使用 mkvtoolnix 工具包</h2>
<p>Mac 系统安装：<code>brew install mkvtoolnix</code></p>
<p>查看文件信息：<code>mkvmerge -i test.mkv</code></p>
<figure data-type="image" tabindex="1"><img src="https://fejich.github.io/post-images/1631241923771.png" alt="" loading="lazy"></figure>
<p>可以看到 4 跟 5 是 ass 字幕</p>
<p>导出命令：<code>mkvextract tracks test.mkv 4:sub1.ass 5:sub2.ass</code></p>
<p>批量操作脚本</p>
<pre><code class="language-sh">for file in *.mkv; do
    filename=${file%.*}
    mkvextract tracks &quot;${file}&quot; 4:&quot;${filename}.map4.ass&quot; 4:&quot;${filename}.map5.ass&quot;
done
</code></pre>
<h2 id="方法2-使用-ffmpeg">💡方法2 使用 ffmpeg</h2>
<p>查看文件信息：<code>ffmpeg -i test.mkv</code></p>
<p>导出字幕：<code>ffmpeg -i test.mkv -map 0:5 sub.ass</code></p>
<blockquote>
<p>ffmpeg 还可以给字幕转格式，例如 ass 转 srt。只要指定输出的格式就会自动处理</p>
</blockquote>
<p>批量操作脚本</p>
<pre><code class="language-sh">for file in *.mkv; do
    filename=${file%.*}
    ffmpeg -i &quot;${file}&quot; -map 0:2 &quot;${filename}.map2.ass&quot; -map 0:3 &quot;${filename}.map3.ass&quot; -map 0:4 &quot;${filename}.map4.ass&quot; -map 0:5 &quot;${filename}.map5.ass&quot;
done
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSH免密登录OpenWRT路由器并执行命令]]></title>
        <id>https://fejich.github.io/post/ssh-mian-mi-deng-lu-openwrt-lu-you-qi-bing-zhi-xing-ming-ling/</id>
        <link href="https://fejich.github.io/post/ssh-mian-mi-deng-lu-openwrt-lu-you-qi-bing-zhi-xing-ming-ling/">
        </link>
        <updated>2021-09-07T11:29:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">📖前言</h2>
<p><code>Dropbear</code>是一款基于ssh协议的轻量sshd服务器，与OpenSSH相比，他更简洁，更小巧，运行起来占用的内存也更少。</p>
<p>每一个普通用户登录，OpenSSH会开两个sshd进程，而dropbear只开一个进程，所以其对硬件要求更低，也更利于系统的运行。</p>
<p>Dropbear常用于“嵌入”式的Linux（或其他Unix）系统，<strong>OpenWRT 路由系统就是其中之一</strong></p>
<h2 id="️实际操作">⚙️实际操作</h2>
<h3 id="1配置-ssh-密钥">1）配置 ssh 密钥</h3>
<p><code>ssh-keygen -t rsa</code></p>
<blockquote>
<p>连续三次回车,即在本地主机上生成了公钥和私钥,不设置密码</p>
</blockquote>
<p><code>cat ~/.ssh/id_rsa.pub | ssh -p 22 root@192.168.168.1 'cat &gt;&gt; /etc/dropbear/authorized_keys'</code></p>
<blockquote>
<p>将本地密钥写入到路由信任列表内</p>
</blockquote>
<h3 id="2测试免密登录路由器并执行命令">2）测试免密登录路由器并执行命令</h3>
<p><code>ssh -p 22 root@192.168.168.1 &quot;touch /root/test ; ls&quot;</code></p>
<h3 id="3配置-crontab-定时执行命令">3）配置 crontab 定时执行命令</h3>
<p><code>crontab -e</code></p>
<pre><code class="language-bash">#凌晨4点重启路由+5点进行时间同步
0 4 * * * ssh -p 22 root@192.168.168.1 &quot;reboot&quot;
0 5 * * * ssh -p 22 root@192.168.168.1 &quot;ntpd -n -q -p ntp.aliyun.com&quot;
</code></pre>
<h2 id="参考">🎈参考</h2>
<p><a href="https://www.jqhtml.com/61355.html">极路由上的dropbear</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 系统下使用 rsync 代替 cp]]></title>
        <id>https://fejich.github.io/post/linux-xi-tong-xia-shi-yong-rsync-dai-ti-cp/</id>
        <link href="https://fejich.github.io/post/linux-xi-tong-xia-shi-yong-rsync-dai-ti-cp/">
        </link>
        <updated>2021-09-07T08:50:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">📖前言</h2>
<p><code>rsync</code> 是一个常用的 Linux 应用程序，用于文件同步。</p>
<p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件。它也可以当作文件复制工具，替代 <code>cp</code> 和 <code>mv</code> 命令。</p>
<h2 id="️实际操作">⚙️实际操作</h2>
<h3 id="显示单个文件进度保留文件的权限">显示单个文件进度，保留文件的权限</h3>
<pre><code class="language-shell">rsync -ah --progress /source /destination
</code></pre>
<h3 id="显示总体进度保留文件的权限">显示总体进度，保留文件的权限</h3>
<pre><code class="language-shell">rsync -ah --info=progress2 --no-i-r /source/ /destination
</code></pre>
<blockquote>
<p>目标目录destination如果不存在，rsync 会自动创建。执行上面的命令后，源目录source被完整地复制到了目标目录destination下面，即形成了destination/source的目录结构。</p>
</blockquote>
<blockquote>
<blockquote>
<p>如果只想同步源目录source里面的内容到目标目录destination，则需要在源目录后面加上斜杠 / 。</p>
</blockquote>
</blockquote>
<h3 id="文件夹镜像">文件夹镜像</h3>
<pre><code>rsync -ah --info=progress2 --no-i-r --delete /source/ /destination
</code></pre>
<h3 id="设置为命令别名方便调用">设置为命令别名，方便调用</h3>
<pre><code>alias cp=&quot;rsync -ah --progress&quot;
alias rcp=&quot;rsync -ah --info=progress2 --no-i-r&quot;
</code></pre>
<h3 id="rsync-常用选项">rsync 常用选项：</h3>
<p><code>-a</code> 递归传输并保持所有文件属性，最常用</p>
<p><code>-h</code> 以人类可读的格式输出</p>
<p><code>-v</code> 详细模式输出</p>
<p><code>-z</code> 文件在传输时进行压缩处理</p>
<p><code>--delete</code> 删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。</p>
<hr>
<h2 id="参考">🎈参考</h2>
<p><a href="http://www.ruanyifeng.com/blog/2020/08/rsync.html">rsync 用法教程</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unRAID 系统下虚拟机黑群辉硬盘无损扩容记录]]></title>
        <id>https://fejich.github.io/post/unraid-xi-tong-xia-xu-ni-ji-hei-qun-hui-ying-pan-wu-sun-kuo-rong-ji-lu/</id>
        <link href="https://fejich.github.io/post/unraid-xi-tong-xia-xu-ni-ji-hei-qun-hui-ying-pan-wu-sun-kuo-rong-ji-lu/">
        </link>
        <updated>2021-09-07T07:47:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="测试环境">🌌测试环境</h2>
<p>黑群辉DSM 6.1.X，Basic 磁盘，btrfs 分区格式<br>
虚拟硬盘为 img 格式，原始容量 30G</p>
<h2 id="1调整虚拟硬盘容量">1）调整虚拟硬盘容量</h2>
<p>务必虚拟机关机情况下再操作</p>
<p><code>qemu-img resize 30G.img -- +70G</code></p>
<blockquote>
<p>使用 qemu-img 命令给虚拟硬盘增加 70G 容量</p>
</blockquote>
<h2 id="2使用-fdisk-无损扩容">2）使用 fdisk 无损扩容</h2>
<p><code>fdisk 30G.img</code></p>
<blockquote>
<p>具体操作记录，注意看 #号后面的中文注解</p>
</blockquote>
<pre><code class="language-shell">Welcome to fdisk (util-linux 2.34).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): p #查看硬盘信息
Disk vdisk2.img: 100 GiB, 107374182400 bytes, 209715200 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xed294359

Device      Boot   Start      End  Sectors  Size Id Type
vdisk2.img1         2048  4982527  4980480  2.4G fd Linux raid autodetect
vdisk2.img2      4982528  9176831  4194304    2G fd Linux raid autodetect
vdisk2.img3      9437184 62709759 53272576 25.4G fd Linux raid autodetect  #记录下第三分区的开始位置 9437184，后边要用到

Command (m for help): d #首先删掉分区
Partition number (1-3, default 3): 

Partition 3 has been deleted.

Command (m for help): n #然后新建一个，按默认选主分区跟编号即可
Partition type
   p   primary (2 primary, 0 extended, 2 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (3,4, default 3): 
First sector (9176832-209715199, default 9177088): 9437184 #这里是无损扩容的关键，必须不能填错
Last sector, +/-sectors or +/-size{K,M,G,T,P} (9437184-209715199, default 209715199): 

Created a new partition 3 of type 'Linux' and of size 95.5 GiB.
Partition #3 contains a linux_raid_member signature.

Do you want to remove the signature? [Y]es/[N]o: n # 必须选 N ，不要移除签名

Command (m for help): p #再次查看信息已经看到分区是扩容状态

Disk vdisk2.img: 100 GiB, 107374182400 bytes, 209715200 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xed294359

Device      Boot   Start       End   Sectors  Size Id Type
vdisk2.img1         2048   4982527   4980480  2.4G fd Linux raid autodetect
vdisk2.img2      4982528   9176831   4194304    2G fd Linux raid autodetect
vdisk2.img3      9437184 209715199 200278016 95.5G 83 Linux

Command (m for help): w #最后按 w 保存分区表
The partition table has been altered.
Syncing disks.
</code></pre>
<h2 id="3打开虚拟机使用-存储空间管理员-扩容即可">3）打开虚拟机，使用 存储空间管理员 扩容即可</h2>
<p>点 <code>管理</code>，按提示操作</p>
<figure data-type="image" tabindex="1"><img src="https://fejich.github.io/post-images/1631242219179.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>